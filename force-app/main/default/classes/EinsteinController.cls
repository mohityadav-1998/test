public class EinsteinController {
    @AuraEnabled
    public static String getAccessToken() {
        ContentVersion base64Content = [SELECT Title, VersionData FROM ContentVersion where Title='einstein_platform.pem1' ORDER BY Title LIMIT 1];
        System.debug('base64Content==='+base64Content);
        String keyContents = base64Content.VersionData.tostring();
         keyContents = keyContents.replace('-----BEGIN RSA PRIVATE KEY-----', '');
         keyContents = keyContents.replace('-----END RSA PRIVATE KEY-----', '');
         keyContents = keyContents.replace('\n', '');
        JWT jwt = new JWT('RS256');
        jwt.pkcs8 = keyContents; 
        jwt.iss = 'developer.force.com';
        jwt.sub = 'mohityadav161098@gmail.com'; // Change this with your email which is used for einstein api setup
        jwt.aud = 'https://api.einstein.ai/v2/oauth2/token';
        jwt.exp = '3600';
        String access_token = JWTBearerFlow.getAccessToken('https://api.einstein.ai/v2/oauth2/token', jwt);
          System.debug('Access Token'+access_token);        
        return access_token;    
    }
    
    public static void getImageText() {
        String access_token = getAccessToken();
        //System.debug('Access Token'+access_token);
        HttpRequest req = new HttpRequest();
        req.setMethod('POST');
        req.setEndpoint('https://api.einstein.ai/v2/vision/ocr');
        req.setHeader('content-type', 'multipart/form-data; charset="UTF-8"; boundary="1ff13444ed8140c7a32fc4e6451aa76d"');
        req.setHeader('Authorization', 'Bearer '+access_token); //replace token with your access token
        
        req.setHeader('Cache-Control', 'no-cache');
        string form64 = '';
        
        form64 += HttpFormBuilder.WriteBoundary();
         form64 += HttpFormBuilder.WriteBodyParameter('sampleLocation','https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQpUN_fTKgpSEMREz3ctB-pWaCb-SSDmbjwrA&usqp=CAU');
        //form64 += HttpFormBuilder.WriteBodyParameter('sampleLocation', '');
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('modelId', 'OCRModel');
        form64 += HttpFormBuilder.WriteBoundary(HttpFormBuilder.EndingType.CrLf);
        
        blob formBlob = EncodingUtil.base64Decode(form64);
        string contentLength = string.valueOf(formBlob.size());
        
        req.setBodyAsBlob(formBlob);
        req.setHeader('Connection', 'keep-alive');
        req.setHeader('Content-Length', contentLength);
        req.setTimeout(60*1000);
        
        Http h = new Http();
        String resp;
        HttpResponse res = h.send(req);
        resp = res.getBody();
        System.debug('Status Code: '+res.getStatusCode());
        System.debug('Status Code: '+resp);
        System.debug('=='+resp );
        if(res.getStatusCode() == 200) {
            EinteinParser ocr = EinteinParser.parse(resp);  
            for( EinteinParser.Probabilities prob : ocr.probabilities) {
                system.debug('========Label==== '+prob.label);
                system.debug('========BoundingBox==== '+prob.boundingBox);
                system.debug('========probability==== '+prob.probability);
            }        
        }
        
    }
    @AuraEnabled
    public static SObject getBusinessCardText(String imageUrl) {
        String access_token = getAccessToken();
        System.debug('imageUrl'+imageUrl);
        HttpRequest req = new HttpRequest();
        req.setMethod('POST');
        req.setEndpoint('https://api.einstein.ai/v2/vision/ocr');
        req.setHeader('content-type', 'multipart/form-data; charset="UTF-8"; boundary="1ff13444ed8140c7a32fc4e6451aa76d"');
        req.setHeader('Authorization', 'Bearer '+access_token); //replace token with your access token
        
        req.setHeader('Cache-Control', 'no-cache');
        string form64 = '';
        
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('sampleLocation', imageUrl);
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('modelId', 'OCRModel');
        form64 += HttpFormBuilder.WriteBoundary();
        form64 += HttpFormBuilder.WriteBodyParameter('task', 'contact');
        form64 += HttpFormBuilder.WriteBoundary(HttpFormBuilder.EndingType.CrLf);
        
        blob formBlob = EncodingUtil.base64Decode(form64);
        string contentLength = string.valueOf(formBlob.size());
        
        req.setBodyAsBlob(formBlob);
        req.setHeader('Connection', 'keep-alive');
        req.setHeader('Content-Length', contentLength);
        req.setTimeout(60*1000);
        
        Http h = new Http();
        String resp;
        HttpResponse res = h.send(req);
        resp = res.getBody();
        System.debug('Status Code: '+res.getStatusCode());
         System.debug('Status Code: '+resp);

        if(res.getStatusCode() == 200) {
            EinteinParser ocr = EinteinParser.parse(resp);  
            for( EinteinParser.Probabilities prob : ocr.probabilities) {
                system.debug('========Label==== '+prob.label);
                system.debug('========BoundingBox==== '+prob.boundingBox);
                system.debug('========probability==== '+prob.probability);
            }        
        }
        SObject rec=  convertOCRResponseToSObjectRecord('Lead', resp );
        return rec;
        
    }

    @AuraEnabled
    public static SObject convertOCRResponseToSObjectRecord(
    String objectApiName,String resp //Lead or Contact
    ) {
        SObject record = ((SObject)Type.forName(objectApiName).newInstance());
    String uncategorisedWords='';
    String separator = '\n';
        EinteinParser ocr = EinteinParser.parse(resp);
    for(EinteinParser.Probabilities extractedWord : ocr.probabilities) {
        System.debug(extractedWord);           
        String word = extractedWord.label.trim();
        switch on extractedWord.attributes.tag {
            when 'PERSON' {
                record.put('LastName', word);
            }
            when 'ADDRESS' {
                uncategorisedWords += 'Address: '+ word;
            }
            when 'PHONE' {
                record.put('Phone',word);
            }
            when 'MOBILE_PHONE' {
                record.put('MobilePhone',word);
            }when 'EMAIL' {
                record.put('Email',word);
            }
            when 'WEBSITE' {    
                if(objectApiName == 'Lead') record.put('Website', word);
                uncategorisedWords += 'Website: '+ word + separator;
            }
            when 'ORG' {
                if(objectApiName == 'Lead') record.put('Company', word);
                uncategorisedWords += 'Company: '+ word+ separator;
            }
            when else {
                uncategorisedWords +=  word + separator;
            }
        }
    }
    record.put('Description', uncategorisedWords);
        //Adding all the unmapped words(the ones tagged as 'OTHER') to the 'Description' field.
        System.debug('Record----'+record);
        If(record.get('LastName')==''){
            record.put('LastName','OCR123');}
        insert record;
        System.debug('Record----'+record.get('Id'));
    return record;
    }

 @AuraEnabled
    public static string getImageUrl(Id fileId){
        string before = 'Testing base 64 encode';            
         Blob beforeblob = Blob.valueOf(before);
        System.debug('fileId----   '+fileId);
        ContentVersion cv = [select id from contentversion where contentdocumentid =:fileId];
        /*ContentVersion cv  = new ContentVersion();
        cv.ContentDocumentId=fileId;
        cv.Title='File Title';
        cv.PathOnClient ='test'; 
        cv.VersionData =beforeblob;      
        insert cv;*/
        ContentDistribution cd = new ContentDistribution();
        cd.ContentVersionId=cv.Id;
        cd.Name='Distribution '+fileId;
        cd.PreferencesNotifyOnVisit=false;
        cd.PreferencesAllowViewInBrowser=true;
       // cd.PathOnClient ='test'; 
        insert cd;
        System.debug('cd----   '+cd.Id);
        String fileUrl=[Select DistributionPublicUrl From ContentDistribution Where Id=:cd.Id].DistributionPublicUrl;
        
        System.debug('fileUrl----   '+fileUrl);
       
        return fileUrl;
    }

}